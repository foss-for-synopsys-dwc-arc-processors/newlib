#
#
DESTDIR =
VPATH = @srcdir@ @srcdir@/..
srcdir = @srcdir@
objdir = .
srcroot = $(srcdir)/../..
objroot = $(objdir)/../..
mkinstalldirs = $(SHELL) $(srcroot)/mkinstalldirs

prefix = @prefix@
exec_prefix = @exec_prefix@

host_alias = @host_alias@
target_alias = @target_alias@

bindir = @bindir@
libdir = @libdir@
tooldir = $(exec_prefix)/$(target_alias)

objtype = @objtype@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

SUBDIRS = @subdirs@

# Multilib support variables.
# TOP is used instead of MULTI{BUILD,SRC}TOP.
MULTIDIRS =
MULTISUBDIR =
MULTIDO = true
MULTICLEAN = true

SHELL =	/bin/sh

CC = @CC@

AS = @AS@
AR = @AR@
LD = @LD@
RANLIB = @RANLIB@

DW_UART_CFLAGS = @DW_UART_CFLAGS@
HL_CFLAGS = @HL_CFLAGS@

OBJDUMP = `if [ -f ${objroot}/../binutils/objdump ] ; \
	then echo ${objroot}/../binutils/objdump ; \
	else t='$(program_transform_name)'; echo objdump | sed -e $$t ; fi`
OBJCOPY = `if [ -f ${objroot}/../binutils/objcopy ] ; \
	then echo ${objroot}/../binutils/objcopy ; \
	else t='$(program_transform_name)'; echo objcopy | sed -e $$t ; fi`

CRT0		= gcrt0.o crt0.o arc-main-helper.o
CRT0_INSTALL	= install-crt0

NSIM_BSP = libnsim.a
NSIM_OBJS = \
	libcfunc.o \
	nsim-syscalls.o \
	sbrk.o \
	mcount.o

NSIM_INSTALL = install-nsim
NSIM_SCRIPTS = nsim.specs

NANO_SCRIPTS = nano.specs
NANO_INSTALL = install-nano

QEMU_BSP = libqemu.a
QEMU_OBJS = \
	qemu-write.o \
	qemu-stub.o \
	sbrk.o
QEMU_INSTALL = install-qemu
QEMU_SCRIPTS = qemu.specs

HL_BSP = libhl.a
HL_OBJS = \
	arc-timer.o \
	hl-stub.o \
	hl-setup.o \
	libcfunc.o \
	sbrk.o \
	mcount.o

HL_INSTALL = install-hl
HL_SCRIPTS = hl.specs

IOTDK_UART_LIB = libiotdk_uart.a
IOTDK_UART_OBJS = iotdk-uart-setup.o

HSDK_UART_LIB = libhsdk_uart.a
HSDK_UART_OBJS = hsdk-uart-setup.o

UART_8250_LIB = libuart_8250.a
UART_8250_OBJS = \
	uart-8250.o \
	uart-8250-stub.o \
	sbrk.o \
	mcount.o

UART_8250_INSTALL = install-uart-8250
UART_8250_SCRIPTS = iotdk.specs hsdk.specs

UART_8250_LIBS = $(UART_8250_LIB) $(IOTDK_UART_LIB) $(HSDK_UART_LIB)

DW_UART_LIB = libdw_uart.a
DW_UART_OBJS = \
	write.o \
	read.o \
	stub.o \
	sbrk.o
DW_UART_INSTALL = install-dw_uart
EMSK_SCRIPTS = emsk_em9d.specs \
               emsk_em11d.specs

MEMORY_MAPS = emsk_em9d.x \
	      emsk_em11d.x \
	      iotdk.x \
	      hsdk.x
MEMORY_MAP_INSTALL = install-map

DW_UART_DIR = dw_uart-dir
HL_DIR = hl-dir

CFLAGS = -g
override CFLAGS += $(DW_UART_CFLAGS) $(HL_CFLAGS)

CPU_FAMILY = $(findstring em,${MULTISUBDIR})
ifeq ($(CPU_FAMILY), em)
ALL = $(CRT0) $(NSIM_BSP) $(DW_UART_LIB) $(QEMU_BSP) $(HL_BSP) $(UART_8250_LIBS)
else
ALL = $(CRT0) $(NSIM_BSP) $(QEMU_BSP) $(HL_BSP) $(UART_8250_LIBS)
endif
ALL_INSTALL = \
	$(CRT0_INSTALL) \
	$(NSIM_INSTALL) \
	$(NANO_INSTALL) \
	$(DW_UART_INSTALL) \
	$(MEMORY_MAP_INSTALL) \
	$(QEMU_INSTALL) \
	$(HL_INSTALL) \
	$(UART_8250_INSTALL)

# These are roughly topologically sorted in order to make porting more
# streamlined.
FLAGS_TO_PASS = \
        "CC=$(CC)" \
        "CFLAGS=$(CFLAGS)" \
        "CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)" \
        "CCASFLAGS=$(CCASFLAGS)" \
        "AR=$(AR)" \
        "RANLIB=$(RANLIB)" \
        "AR_FLAGS=$(AR_FLAGS)" \
        "MAKEINFO=$(MAKEINFO)" \
        "AS=$(AS)" \
        "LD=$(LD)" \
        "CROSS_CFLAGS=$(CROSS_CFLAGS)" \
        "TARGET_CFLAGS=$(TARGET_CFLAGS)" \
        "exec_prefix=$(exec_prefix)" \
        "prefix=$(prefix)" \
        "tooldir=$(tooldir)" \
        "infodir=$(infodir)" \
        "libdir=$(libdir)" \
        "top_toollibdir=$(toollibdir)" \
        "INSTALL=$(INSTALL)" \
        "INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
        "INSTALL_DATA=$(INSTALL_DATA)" \
        "DESTDIR=$(DESTDIR)"

# Host specific makefile fragment comes in here.
@host_makefile_frag@

all: $(ALL)

$(NSIM_BSP): $(NSIM_OBJS)
	$(AR) $(ARFLAGS) $@ $?
	$(RANLIB) $@

$(DW_UART_LIB): $(DW_UART_OBJS) $(DW_UART_DIR)
	$(AR) $(ARFLAGS) $@ $(DW_UART_OBJS) dw_uart/*.o
	$(RANLIB) $@

$(HL_DIR): hl
$(DW_UART_DIR): dw_uart

$(HL_DIR) $(DW_UART_DIR):
	for dir in $^; do \
	  if [ -d $$dir ]; then \
	    (cd $$dir; $(MAKE) $(FLAGS_TO_PASS) all) || exit $$?; \
	  fi; \
	done

$(QEMU_BSP): $(QEMU_OBJS)
	$(AR) $(ARFLAGS) $@ $?
	$(RANLIB) $@

$(HL_BSP): $(HL_OBJS) $(HL_DIR)
	$(AR) $(ARFLAGS) $@ $(HL_OBJS) hl/*.o
	$(RANLIB) $@

$(UART_8250_LIB): $(UART_8250_OBJS)
	$(AR) $(ARFLAGS) $@ $?
	$(RANLIB) $@

$(IOTDK_UART_LIB): $(IOTDK_UART_OBJS)
	$(AR) $(ARFLAGS) $@ $?
	$(RANLIB) $@

$(HSDK_UART_LIB): $(HSDK_UART_OBJS)
	$(AR) $(ARFLAGS) $@ $?
	$(RANLIB) $@

libcfunc.o: libcfunc.c
nsim-syscalls.o: nsim-syscalls.c
sbrk.o: sbrk.c
mcount.o: mcount.c
gcrt0.o: gcrt0.S crt0.S
crt0.o: crt0.S
write.o: write.c
qemu-write.o: qemu-write.c
read.o: read.c
stub.o: stub.c
qemu-stub.o: qemu-stub.c
hl-stub.o: hl-stub.c
hl-setup.o: hl-setup.c
arc-timer.o: arc-timer.c
arc-main-helper.o: arc-main-helper.c
uart-8250.o: uart-8250.c
uart-8250-stub.o: uart-8250-stub.c
iotdk-uart-setup.o: iotdk-uart-setup.c
hsdk-uart-setup.o: hsdk-uart-setup.c

$(DW_UART_OBJS):
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $(CFLAGS) $<

clean mostlyclean:
	rm -f *.o *.a

distclean maintainer-clean realclean: clean
	rm -f Makefile config.status config.log config.cache *~

.PHONY: install info install-info clean-info doc dvi
install: $(ALL_INSTALL)

# multilibdir may not exist yet - libgcc for ARC depends on libc, hence
# newlib/libgloss is built before libgcc. And in parallel build libgloss maybe
# built and installed before newlib, therefore libgloss has to create target
# directory.

$(CRT0_INSTALL):
	$(mkinstalldirs) $(DESTDIR)${tooldir}/lib${MULTISUBDIR}
	for c in $(CRT0); do \
	  b=`basename $$c`; \
	  ${INSTALL_DATA} $$c $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$b ;\
	done

$(NSIM_INSTALL):
	$(mkinstalldirs) $(DESTDIR)${tooldir}/lib${MULTISUBDIR}
	$(INSTALL_DATA) $(NSIM_BSP) $(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)/$(NSIM_BSP)
	for x in $(NSIM_SCRIPTS); do \
	    $(INSTALL_DATA) $(srcdir)/$$x $(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)/$$x; done

$(NANO_INSTALL):
	$(mkinstalldirs) $(DESTDIR)${tooldir}/lib${MULTISUBDIR}
	for x in $(NANO_SCRIPTS); do \
		$(INSTALL_DATA) $(srcdir)/$$x $(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)/$$x; done

$(DW_UART_INSTALL):
	if [ "$(CPU_FAMILY)" == "em" ]; then \
		$(mkinstalldirs) $(DESTDIR)${tooldir}/lib${MULTISUBDIR} ; \
		$(INSTALL_DATA) $(DW_UART_LIB) $(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)/$(DW_UART_LIB) ; fi
	for x in $(EMSK_SCRIPTS); do \
		$(INSTALL_DATA) $(srcdir)/$$x $(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)/$$x; done

$(QEMU_INSTALL):
	$(mkinstalldirs) $(DESTDIR)${tooldir}/lib${MULTISUBDIR}
	$(INSTALL_DATA) $(QEMU_BSP) $(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)/$(QEMU_BSP)
	for x in $(QEMU_SCRIPTS); do \
	    $(INSTALL_DATA) $(srcdir)/$$x $(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)/$$x; done

$(HL_INSTALL):
	$(mkinstalldirs) $(DESTDIR)${tooldir}/lib${MULTISUBDIR}
	$(INSTALL_DATA) $(HL_BSP) $(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)/$(HL_BSP)
	for x in $(HL_SCRIPTS); do \
	    $(INSTALL_DATA) $(srcdir)/$$x $(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)/$$x; done

$(UART_8250_INSTALL):
	$(mkinstalldirs) $(DESTDIR)${tooldir}/lib${MULTISUBDIR}
	for x in $(UART_8250_LIBS); do \
	    $(INSTALL_DATA) $$x $(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)/$$x; done
	for x in $(UART_8250_SCRIPTS); do \
	    $(INSTALL_DATA) $(srcdir)/$$x $(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)/$$x; done

$(MEMORY_MAP_INSTALL):
	$(mkinstalldirs) $(DESTDIR)${tooldir}/lib${MULTISUBDIR}
	for x in $(basename $(MEMORY_MAPS)); do \
		$(mkinstalldirs) $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; \
		$(INSTALL_DATA) $(srcdir)/$$x.x \
		    $(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)/$$x/memory.x; done

doc:
info:
dvi:
install-info:
clean-info:

Makefile: Makefile.in config.status @host_makefile_frag_path@
	$(SHELL) config.status

config.status: configure
	$(SHELL) config.status --recheck
